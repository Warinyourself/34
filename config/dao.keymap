/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt {
    quick_tap_ms = <200>;
};

&mt {
    quick_tap_ms = <200>;
};

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        esc_combo {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
            layers = <0>;
            timeout-ms = <50>;
        };

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <16 15>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Main {
            bindings = <
   &mt TAB RBKT  &kp Q  &kp W  &kp E                   &kp R       &kp T         &kp Y                &kp U      &kp I    &kp O     &kp P       &kp LBKT
&mt LSHFT GRAVE  &kp A  &kp S  &kp D                   &kp F       &kp G         &kp H                &kp J      &kp K    &kp L  &kp SEMI  &mt RCTRL SQT
 &mt LALT MINUS  &kp Z  &kp X  &kp C                   &kp V       &kp B         &kp N                &kp M  &kp COMMA  &kp DOT  &kp FSLH  &mt RALT BSLH
                               &none  &mt LEFT_CONTROL SPACE  &kp LSHIFT  &mt LALT TAB  &mt RSHFT BACKSPACE      &none
            >;
        };

        Left {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        lower_layer {
            bindings = <
   &mt LGUI F1        &kp F2        &kp F3        &kp F4        &kp F5        &kp F6        &kp F7        &kp F8        &kp F9       &kp F10       &kp F11          &kp F12
&mt LCTRL PLUS  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &mt RCTRL MINUS
&mt LALT EQUAL      &kp EXCL        &kp AT      &kp HASH      &kp DLLR     &kp PRCNT     &kp CARET      &kp AMPS      &kp STAR      &kp LPAR      &kp RPAR         &kp RALT
                                               &lt 4 TAB        &trans        &trans        &trans        &trans     &lt 4 DEL
            >;
        };

        raise_layer {
            bindings = <
&mt LGUI KP_NUM     &kp KP_SLASH  &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp C_VOL_UP  &kp HOME  &kp PSCRN  &kp PG_UP         &kp SLCK         &kp CLCK
&mt LCTRL EQUAL  &kp KP_MULTIPLY  &kp KP_N4  &kp KP_N5  &kp KP_N6   &kp KP_PLUS    &kp C_MUTE  &kp LEFT     &kp UP  &kp RIGHT          &kp INS  &mt RCTRL K_APP
       &kp LALT        &kp KP_N0  &kp KP_N1  &kp KP_N2  &kp KP_N3    &kp KP_DOT  &kp C_VOL_DN   &kp END   &kp DOWN  &kp PG_DN  &kp PAUSE_BREAK         &kp RALT
                                                &trans     &trans     &lt 4 RET        &trans    &trans     &trans
            >;
        };

        adjust_layer {
            bindings = <
&bootloader         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none  &bootloader
 &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0   &bt BT_CLR
 &sys_reset         &none         &none         &none         &none         &none         &none         &none         &none         &none         &none   &sys_reset
                                               &trans         &none        &trans         &none        &trans        &trans
            >;
        };

        layer_5 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
